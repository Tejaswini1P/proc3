#include <bits/stdc++.h>
using namespace std;
 
// Function to return precedence of operators
int prec(char c) {
    if (c == '^')
        return 3;
    else if (c == '/' || c == '*')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}
 
// Function to return associativity of operators
char associativity(char c) {
    if (c == '^')
        return 'R';
    return 'L'; // Default to left-associative
}
 
// The main function to convert infix expression
// to postfix expression
void infixToPostfix(string s) {
    stack<char> st;
    string result;
 
    for (int i = 0; i < s.length(); i++) {
        char c = s[i];
 
        // If the scanned character is
        // an operand, add it to the output string.
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
            result += c;
 
        // If the scanned character is an
        // ‘(‘, push it to the stack.
        else if (c == '(')
            st.push('(');
 
        // If the scanned character is an ‘)’,
        // pop and add to the output string from the stack
        // until an ‘(‘ is encountered.
        else if (c == ')') {
            while (st.top() != '(') {
                result += st.top();
                st.pop();
            }
            st.pop(); // Pop '('
        }
 
        // If an operator is scanned
        else {
            while (!st.empty() && prec(s[i]) < prec(st.top()) ||
                   !st.empty() && prec(s[i]) == prec(st.top()) &&
                   associativity(s[i]) == 'L') {
                result += st.top();
                st.pop();
            }
            st.push(c);
        }
    }
 
    // Pop all the remaining elements from the stack
    while (!st.empty()) {
        result += st.top();
        st.pop();
    }
 
    cout << result << endl;
}
 
// Driver code
int main() {
    string exp = "a+b*(c^d-e)^(f+g*h)-i";
 
    // Function call
    infixToPostfix(exp);
 
    return 0;
}







git init
git add your_new_file.txt
git commit -m "Initial commit - adding a new file"
git branch feature-branch
git checkout -b feature-branch
git checkout master
git branch -d feature-branch
git stash save "Your stash message"
git stash apply
git stash apply stash@{1}
git stash drop
git stash pop
git stash drop stash@{1}
git clone <repository_url>
git clone https://github.com/example/repo.git (public)
git clone git@github.com:example/repo.git
git fetch
git rebase origin/your-branch
git rebase -i origin/your-branch
git rebase --continue
git rebase --abort
git push origin your-branch --force
git merge feature-branch -m "Your custom commit message"
git merge --continue
git merge feature-branch --no-ff -e
git tag v1.0 <commit_hash>
git tag v1.0 HEAD
git push origin v1.0
git cherry-pick <start-commit>^..<end-commit>
git cherry-pick A^..B
git cherry-pick --continue
git cherry-pick --abort
git show <commit-id>
git show abc123
git log -n 1 --pretty=format:"%h - %an, %ar : %s" <commit-id>
git log --author="JohnDoe" --since="2023-01-01" --until="2023-12-31"
git log -n 5
git log -n 5 --oneline
git revert abc123
git reset --hard abc123


